{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/shared/lib/router/utils/handle-smooth-scroll.ts"],"sourcesContent":["/**\n * Run function with `scroll-behavior: auto` applied to `<html/>`.\n * This css change will be reverted after the function finishes.\n */\nexport function handleSmoothScroll(\n  fn: () => void,\n  options: { dontForceLayout?: boolean; onlyHashChange?: boolean } = {}\n) {\n  // if only the hash is changed, we don't need to disable smooth scrolling\n  // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX\n  if (options.onlyHashChange) {\n    fn()\n    return\n  }\n  const htmlElement = document.documentElement\n  const existing = htmlElement.style.scrollBehavior\n  htmlElement.style.scrollBehavior = 'auto'\n  if (!options.dontForceLayout) {\n    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.\n    // Otherwise it will not pickup the change in scrollBehavior\n    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042\n    htmlElement.getClientRects()\n  }\n  fn()\n  htmlElement.style.scrollBehavior = existing\n}\n"],"names":["handleSmoothScroll","fn","options","onlyHashChange","htmlElement","document","documentElement","existing","style","scrollBehavior","dontForceLayout","getClientRects"],"mappings":"AAAA;;;CAGC,GAAA;;;;+BACeA,sBAAAA;;;eAAAA;;;AAAT,SAASA,mBACdC,EAAc,EACdC,OAAqE;IAArEA,IAAAA,YAAAA,KAAAA,GAAAA,UAAmE,CAAC;IAEpE,yEAAyE;IACzE,6FAA6F;IAC7F,IAAIA,QAAQC,cAAc,EAAE;QAC1BF;QACA;IACF;IACA,MAAMG,cAAcC,SAASC,eAAe;IAC5C,MAAMC,WAAWH,YAAYI,KAAK,CAACC,cAAc;IACjDL,YAAYI,KAAK,CAACC,cAAc,GAAG;IACnC,IAAI,CAACP,QAAQQ,eAAe,EAAE;QAC5B,8EAA8E;QAC9E,4DAA4D;QAC5D,yFAAyF;QACzFN,YAAYO,cAAc;IAC5B;IACAV;IACAG,YAAYI,KAAK,CAACC,cAAc,GAAGF;AACrC"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/client/components/layout-router.tsx"],"sourcesContent":["'use client'\n\nimport type {\n  ChildSegmentMap,\n  LazyCacheNode,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../../server/app-render/types'\nimport type { ErrorComponent } from './error-boundary'\nimport type { FocusAndScrollRef } from './router-reducer/router-reducer-types'\n\nimport React, {\n  useContext,\n  use,\n  startTransition,\n  Suspense,\n  useDeferredValue,\n  type JSX,\n} from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n  TemplateContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport { fetchServerResponse } from './router-reducer/fetch-server-response'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { ErrorBoundary } from './error-boundary'\nimport { matchSegment } from './match-segments'\nimport { handleSmoothScroll } from '../../shared/lib/router/utils/handle-smooth-scroll'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { NotFoundBoundary } from './not-found-boundary'\nimport { getSegmentValue } from './router-reducer/reducers/get-segment-value'\nimport { createRouterCacheKey } from './router-reducer/create-router-cache-key'\nimport { hasInterceptionRouteInCurrentTree } from './router-reducer/reducers/has-interception-route-in-current-tree'\n\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */\nfunction walkAddRefetch(\n  segmentPathToWalk: FlightSegmentPath | undefined,\n  treeToRecreate: FlightRouterState\n): FlightRouterState {\n  if (segmentPathToWalk) {\n    const [segment, parallelRouteKey] = segmentPathToWalk\n    const isLast = segmentPathToWalk.length === 2\n\n    if (matchSegment(treeToRecreate[0], segment)) {\n      if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n        if (isLast) {\n          const subTree = walkAddRefetch(\n            undefined,\n            treeToRecreate[1][parallelRouteKey]\n          )\n          return [\n            treeToRecreate[0],\n            {\n              ...treeToRecreate[1],\n              [parallelRouteKey]: [\n                subTree[0],\n                subTree[1],\n                subTree[2],\n                'refetch',\n              ],\n            },\n          ]\n        }\n\n        return [\n          treeToRecreate[0],\n          {\n            ...treeToRecreate[1],\n            [parallelRouteKey]: walkAddRefetch(\n              segmentPathToWalk.slice(2),\n              treeToRecreate[1][parallelRouteKey]\n            ),\n          },\n        ]\n      }\n    }\n  }\n\n  return treeToRecreate\n}\n\nconst __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = (\n  ReactDOM as any\n).__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n\n// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available\n/**\n * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning\n */\nfunction findDOMNode(\n  instance: React.ReactInstance | null | undefined\n): Element | Text | null {\n  // Tree-shake for server bundle\n  if (typeof window === 'undefined') return null\n\n  // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.\n  // We need to lazily reference it.\n  const internal_reactDOMfindDOMNode =\n    __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode\n  return internal_reactDOMfindDOMNode(instance)\n}\n\nconst rectProperties = [\n  'bottom',\n  'height',\n  'left',\n  'right',\n  'top',\n  'width',\n  'x',\n  'y',\n] as const\n/**\n * Check if a HTMLElement is hidden or fixed/sticky position\n */\nfunction shouldSkipElement(element: HTMLElement) {\n  // we ignore fixed or sticky positioned elements since they'll likely pass the \"in-viewport\" check\n  // and will result in a situation we bail on scroll because of something like a fixed nav,\n  // even though the actual page content is offscreen\n  if (['sticky', 'fixed'].includes(getComputedStyle(element).position)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:',\n        element\n      )\n    }\n    return true\n  }\n\n  // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`\n  // because `offsetParent` doesn't consider document/body\n  const rect = element.getBoundingClientRect()\n  return rectProperties.every((item) => rect[item] === 0)\n}\n\n/**\n * Check if the top corner of the HTMLElement is in the viewport.\n */\nfunction topOfElementInViewport(element: HTMLElement, viewportHeight: number) {\n  const rect = element.getBoundingClientRect()\n  return rect.top >= 0 && rect.top <= viewportHeight\n}\n\n/**\n * Find the DOM node for a hash fragment.\n * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.\n * If the hash fragment is an id, the page has to scroll to the element with that id.\n * If the hash fragment is a name, the page has to scroll to the first element with that name.\n */\nfunction getHashFragmentDomNode(hashFragment: string) {\n  // If the hash fragment is `top` the page has to scroll to the top of the page.\n  if (hashFragment === 'top') {\n    return document.body\n  }\n\n  // If the hash fragment is an id, the page has to scroll to the element with that id.\n  return (\n    document.getElementById(hashFragment) ??\n    // If the hash fragment is a name, the page has to scroll to the first element with that name.\n    document.getElementsByName(hashFragment)[0]\n  )\n}\ninterface ScrollAndFocusHandlerProps {\n  focusAndScrollRef: FocusAndScrollRef\n  children: React.ReactNode\n  segmentPath: FlightSegmentPath\n}\nclass InnerScrollAndFocusHandler extends React.Component<ScrollAndFocusHandlerProps> {\n  handlePotentialScroll = () => {\n    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n    const { focusAndScrollRef, segmentPath } = this.props\n\n    if (focusAndScrollRef.apply) {\n      // segmentPaths is an array of segment paths that should be scrolled to\n      // if the current segment path is not in the array, the scroll is not applied\n      // unless the array is empty, in which case the scroll is always applied\n      if (\n        focusAndScrollRef.segmentPaths.length !== 0 &&\n        !focusAndScrollRef.segmentPaths.some((scrollRefSegmentPath) =>\n          segmentPath.every((segment, index) =>\n            matchSegment(segment, scrollRefSegmentPath[index])\n          )\n        )\n      ) {\n        return\n      }\n\n      let domNode:\n        | ReturnType<typeof getHashFragmentDomNode>\n        | ReturnType<typeof findDOMNode> = null\n      const hashFragment = focusAndScrollRef.hashFragment\n\n      if (hashFragment) {\n        domNode = getHashFragmentDomNode(hashFragment)\n      }\n\n      // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.\n      // This already caused a bug where the first child was a <link/> in head.\n      if (!domNode) {\n        domNode = findDOMNode(this)\n      }\n\n      // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.\n      if (!(domNode instanceof Element)) {\n        return\n      }\n\n      // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.\n      // If the element is skipped, try to select the next sibling and try again.\n      while (!(domNode instanceof HTMLElement) || shouldSkipElement(domNode)) {\n        // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.\n        if (domNode.nextElementSibling === null) {\n          return\n        }\n        domNode = domNode.nextElementSibling\n      }\n\n      // State is mutated to ensure that the focus and scroll is applied only once.\n      focusAndScrollRef.apply = false\n      focusAndScrollRef.hashFragment = null\n      focusAndScrollRef.segmentPaths = []\n\n      handleSmoothScroll(\n        () => {\n          // In case of hash scroll, we only need to scroll the element into view\n          if (hashFragment) {\n            ;(domNode as HTMLElement).scrollIntoView()\n\n            return\n          }\n          // Store the current viewport height because reading `clientHeight` causes a reflow,\n          // and it won't change during this function.\n          const htmlElement = document.documentElement\n          const viewportHeight = htmlElement.clientHeight\n\n          // If the element's top edge is already in the viewport, exit early.\n          if (topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            return\n          }\n\n          // Otherwise, try scrolling go the top of the document to be backward compatible with pages\n          // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)\n          // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left\n          // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically\n          htmlElement.scrollTop = 0\n\n          // Scroll to domNode if domNode is not in viewport when scrolled to top of document\n          if (!topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            // Scroll into view doesn't scroll horizontally by default when not needed\n            ;(domNode as HTMLElement).scrollIntoView()\n          }\n        },\n        {\n          // We will force layout by querying domNode position\n          dontForceLayout: true,\n          onlyHashChange: focusAndScrollRef.onlyHashChange,\n        }\n      )\n\n      // Mutate after scrolling so that it can be read by `handleSmoothScroll`\n      focusAndScrollRef.onlyHashChange = false\n\n      // Set focus on the element\n      domNode.focus()\n    }\n  }\n\n  componentDidMount() {\n    this.handlePotentialScroll()\n  }\n\n  componentDidUpdate() {\n    // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.\n    if (this.props.focusAndScrollRef.apply) {\n      this.handlePotentialScroll()\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nfunction ScrollAndFocusHandler({\n  segmentPath,\n  children,\n}: {\n  segmentPath: FlightSegmentPath\n  children: React.ReactNode\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  return (\n    <InnerScrollAndFocusHandler\n      segmentPath={segmentPath}\n      focusAndScrollRef={context.focusAndScrollRef}\n    >\n      {children}\n    </InnerScrollAndFocusHandler>\n  )\n}\n\n/**\n * InnerLayoutRouter handles rendering the provided segment based on the cache.\n */\nfunction InnerLayoutRouter({\n  parallelRouterKey,\n  url,\n  childNodes,\n  segmentPath,\n  tree,\n  // TODO-APP: implement `<Offscreen>` when available.\n  // isActive,\n  cacheKey,\n}: {\n  parallelRouterKey: string\n  url: string\n  childNodes: ChildSegmentMap\n  segmentPath: FlightSegmentPath\n  tree: FlightRouterState\n  isActive: boolean\n  cacheKey: ReturnType<typeof createRouterCacheKey>\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  const { buildId, changeByServerResponse, tree: fullTree } = context\n\n  // Read segment path from the parallel router cache node.\n  let childNode = childNodes.get(cacheKey)\n\n  // When data is not available during rendering client-side we need to fetch\n  // it from the server.\n  if (childNode === undefined) {\n    const newLazyCacheNode: LazyCacheNode = {\n      lazyData: null,\n      rsc: null,\n      prefetchRsc: null,\n      head: null,\n      prefetchHead: null,\n      parallelRoutes: new Map(),\n      loading: null,\n    }\n\n    /**\n     * Flight data fetch kicked off during render and put into the cache.\n     */\n    childNode = newLazyCacheNode\n    childNodes.set(cacheKey, newLazyCacheNode)\n  }\n\n  // `rsc` represents the renderable node for this segment.\n\n  // If this segment has a `prefetchRsc`, it's the statically prefetched data.\n  // We should use that on initial render instead of `rsc`. Then we'll switch\n  // to `rsc` when the dynamic response streams in.\n  //\n  // If no prefetch data is available, then we go straight to rendering `rsc`.\n  const resolvedPrefetchRsc =\n    childNode.prefetchRsc !== null ? childNode.prefetchRsc : childNode.rsc\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  //\n  // @ts-expect-error The second argument to `useDeferredValue` is only\n  // available in the experimental builds. When its disabled, it will always\n  // return `rsc`.\n  const rsc: any = useDeferredValue(childNode.rsc, resolvedPrefetchRsc)\n\n  // `rsc` is either a React node or a promise for a React node, except we\n  // special case `null` to represent that this segment's data is missing. If\n  // it's a promise, we need to unwrap it so we can determine whether or not the\n  // data is missing.\n  const resolvedRsc: React.ReactNode =\n    typeof rsc === 'object' && rsc !== null && typeof rsc.then === 'function'\n      ? use(rsc)\n      : rsc\n\n  if (!resolvedRsc) {\n    // The data for this segment is not available, and there's no pending\n    // navigation that will be able to fulfill it. We need to fetch more from\n    // the server and patch the cache.\n\n    // Check if there's already a pending request.\n    let lazyData = childNode.lazyData\n    if (lazyData === null) {\n      /**\n       * Router state with refetch marker added\n       */\n      // TODO-APP: remove ''\n      const refetchTree = walkAddRefetch(['', ...segmentPath], fullTree)\n      const includeNextUrl = hasInterceptionRouteInCurrentTree(fullTree)\n      childNode.lazyData = lazyData = fetchServerResponse(\n        new URL(url, location.origin),\n        {\n          flightRouterState: refetchTree,\n          nextUrl: includeNextUrl ? context.nextUrl : null,\n          buildId,\n        }\n      ).then((serverResponse) => {\n        startTransition(() => {\n          changeByServerResponse({\n            previousTree: fullTree,\n            serverResponse,\n          })\n        })\n\n        return serverResponse\n      })\n    }\n    // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n    // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.\n    use(unresolvedThenable) as never\n  }\n\n  // If we get to this point, then we know we have something we can render.\n  const subtree = (\n    // The layout router context narrows down tree and childNodes at each level.\n    <LayoutRouterContext.Provider\n      value={{\n        tree: tree[1][parallelRouterKey],\n        childNodes: childNode.parallelRoutes,\n        // TODO-APP: overriding of url for parallel routes\n        url: url,\n        loading: childNode.loading,\n      }}\n    >\n      {resolvedRsc}\n    </LayoutRouterContext.Provider>\n  )\n  // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n  return subtree\n}\n\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */\nfunction LoadingBoundary({\n  children,\n  hasLoading,\n  loading,\n  loadingStyles,\n  loadingScripts,\n}: {\n  children: React.ReactNode\n  hasLoading: boolean\n  loading?: React.ReactNode\n  loadingStyles?: React.ReactNode\n  loadingScripts?: React.ReactNode\n}): JSX.Element {\n  // We have an explicit prop for checking if `loading` is provided, to disambiguate between a loading\n  // component that returns `null` / `undefined`, vs not having a loading component at all.\n  if (hasLoading) {\n    return (\n      <Suspense\n        fallback={\n          <>\n            {loadingStyles}\n            {loadingScripts}\n            {loading}\n          </>\n        }\n      >\n        {children}\n      </Suspense>\n    )\n  }\n\n  return <>{children}</>\n}\n\n/**\n * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.\n * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.\n */\nexport default function OuterLayoutRouter({\n  parallelRouterKey,\n  segmentPath,\n  error,\n  errorStyles,\n  errorScripts,\n  templateStyles,\n  templateScripts,\n  template,\n  notFound,\n  notFoundStyles,\n}: {\n  parallelRouterKey: string\n  segmentPath: FlightSegmentPath\n  error: ErrorComponent | undefined\n  errorStyles: React.ReactNode | undefined\n  errorScripts: React.ReactNode | undefined\n  templateStyles: React.ReactNode | undefined\n  templateScripts: React.ReactNode | undefined\n  template: React.ReactNode\n  notFound: React.ReactNode | undefined\n  notFoundStyles: React.ReactNode | undefined\n}) {\n  const context = useContext(LayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant expected layout router to be mounted')\n  }\n\n  const { childNodes, tree, url, loading } = context\n\n  // Get the current parallelRouter cache node\n  let childNodesForParallelRouter = childNodes.get(parallelRouterKey)\n  // If the parallel router cache node does not exist yet, create it.\n  // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n  if (!childNodesForParallelRouter) {\n    childNodesForParallelRouter = new Map()\n    childNodes.set(parallelRouterKey, childNodesForParallelRouter)\n  }\n\n  // Get the active segment in the tree\n  // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.\n  const treeSegment = tree[1][parallelRouterKey][0]\n\n  // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.\n  const currentChildSegmentValue = getSegmentValue(treeSegment)\n\n  /**\n   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.\n   */\n  // TODO-APP: Add handling of `<Offscreen>` when it's available.\n  const preservedSegments: Segment[] = [treeSegment]\n\n  return (\n    <>\n      {preservedSegments.map((preservedSegment) => {\n        const preservedSegmentValue = getSegmentValue(preservedSegment)\n        const cacheKey = createRouterCacheKey(preservedSegment)\n\n        return (\n          /*\n            - Error boundary\n              - Only renders error boundary if error component is provided.\n              - Rendered for each segment to ensure they have their own error state.\n            - Loading boundary\n              - Only renders suspense boundary if loading components is provided.\n              - Rendered for each segment to ensure they have their own loading state.\n              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n          */\n          <TemplateContext.Provider\n            key={createRouterCacheKey(preservedSegment, true)}\n            value={\n              <ScrollAndFocusHandler segmentPath={segmentPath}>\n                <ErrorBoundary\n                  errorComponent={error}\n                  errorStyles={errorStyles}\n                  errorScripts={errorScripts}\n                >\n                  <LoadingBoundary\n                    hasLoading={Boolean(loading)}\n                    loading={loading?.[0]}\n                    loadingStyles={loading?.[1]}\n                    loadingScripts={loading?.[2]}\n                  >\n                    <NotFoundBoundary\n                      notFound={notFound}\n                      notFoundStyles={notFoundStyles}\n                    >\n                      <RedirectBoundary>\n                        <InnerLayoutRouter\n                          parallelRouterKey={parallelRouterKey}\n                          url={url}\n                          tree={tree}\n                          childNodes={childNodesForParallelRouter!}\n                          segmentPath={segmentPath}\n                          cacheKey={cacheKey}\n                          isActive={\n                            currentChildSegmentValue === preservedSegmentValue\n                          }\n                        />\n                      </RedirectBoundary>\n                    </NotFoundBoundary>\n                  </LoadingBoundary>\n                </ErrorBoundary>\n              </ScrollAndFocusHandler>\n            }\n          >\n            {templateStyles}\n            {templateScripts}\n            {template}\n          </TemplateContext.Provider>\n        )\n      })}\n    </>\n  )\n}\n"],"names":["segmentPathToWalk","parallelRouteKey","isLast","length","matchSegment","treeToRecreate","hasOwnProperty","subTree","walkAddRefetch","internal_reactDOMfindDOMNode","instance","includes","process","rectProperties","item","rect","getBoundingClientRect","top","viewportHeight","body","document","hashFragment","componentDidMount","handlePotentialScroll","componentDidUpdate","render","focusAndScrollRef","apply","segmentPaths","domNode","getHashFragmentDomNode","findDOMNode","handleSmoothScroll","scrollIntoView","htmlElement","clientHeight","dontForceLayout","onlyHashChange","context","useContext","Error","segmentPath","children","parallelRouterKey","url","childNodes","cacheKey","undefined","newLazyCacheNode","lazyData","rsc","prefetchRsc","head","prefetchHead","parallelRoutes","loading","set","useDeferredValue","resolvedRsc","fullTree","childNode","fetchServerResponse","location","flightRouterState","refetchTree","nextUrl","includeNextUrl","buildId","then","startTransition","changeByServerResponse","serverResponse","use","tree","subtree","hasLoading","fallback","loadingStyles","loadingScripts","LayoutRouterContext","childNodesForParallelRouter","treeSegment","preservedSegments","preservedSegment","preservedSegmentValue","createRouterCacheKey","value","ScrollAndFocusHandler","errorComponent","error","errorStyles","errorScripts","Boolean","NotFoundBoundary","notFound","notFoundStyles","InnerLayoutRouter","isActive","currentChildSegmentValue","templateStyles","templateScripts","template"],"mappings":"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"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/client/components/render-from-template-context.tsx"],"sourcesContent":["'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport { TemplateContext } from '../../shared/lib/app-router-context.shared-runtime'\n\nexport default function RenderFromTemplateContext(): JSX.Element {\n  const children = useContext(TemplateContext)\n  return <>{children}</>\n}\n"],"names":["children"],"mappings":"AAAA;;;;;;;;;;;;;uDAGgC,CAAA;AAEjB,MAAA;SACb;IACA,MAAA,WAAA,CAAA,GAAO,OAAA,UAAA,EAAA,+BAAA,eAAA;sBAAGA,GAAAA,CAAAA,GAAAA,YAAAA,GAAAA,EAAAA,YAAAA,QAAAA,EAAAA;;IACZ"}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 514, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/client/components/static-generation-bailout.ts"],"sourcesContent":["const NEXT_STATIC_GEN_BAILOUT = 'NEXT_STATIC_GEN_BAILOUT'\n\nexport class StaticGenBailoutError extends Error {\n  public readonly code = NEXT_STATIC_GEN_BAILOUT\n}\n\nexport function isStaticGenBailoutError(\n  error: unknown\n): error is StaticGenBailoutError {\n  if (typeof error !== 'object' || error === null || !('code' in error)) {\n    return false\n  }\n\n  return error.code === NEXT_STATIC_GEN_BAILOUT\n}\n"],"names":["StaticGenBailoutError","isStaticGenBailoutError","NEXT_STATIC_GEN_BAILOUT","Error","code","error"],"mappings":";;;;;;;;;;;;;;;IAEaA,uBAAqB;eAArBA;;IAIGC,yBAAuB;eAAvBA;;;AANhB,MAAMC,0BAA0B;AAEzB,MAAMF,8BAA8BG;;;aACzBC,IAAAA,GAAOF;;AACzB;AAEO,SAASD,wBACdI,KAAc;IAEd,IAAI,OAAOA,UAAU,YAAYA,UAAU,QAAQ,CAAE,CAAA,UAAUA,KAAI,GAAI;QACrE,OAAO;IACT;IAEA,OAAOA,MAAMD,IAAI,KAAKF;AACxB"}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 560, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/server/app-render/dynamic-rendering.ts"],"sourcesContent":["/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */\n\n// Once postpone is in stable we should switch to importing the postpone export directly\nimport React from 'react'\n\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\n\nconst hasPostpone = typeof React.unstable_postpone === 'function'\n\ntype DynamicAccess = {\n  /**\n   * If debugging, this will contain the stack trace of where the dynamic access\n   * occurred. This is used to provide more information to the user about why\n   * their page is being rendered dynamically.\n   */\n  stack?: string\n\n  /**\n   * The expression that was accessed dynamically.\n   */\n  expression: string\n}\n\n// Stores dynamic reasons used during a render.\nexport type PrerenderState = {\n  /**\n   * When true, stack information will also be tracked during dynamic access.\n   */\n  readonly isDebugDynamicAccesses: boolean | undefined\n\n  /**\n   * The dynamic accesses that occurred during the render.\n   */\n  readonly dynamicAccesses: DynamicAccess[]\n}\n\nexport function createPrerenderState(\n  isDebugDynamicAccesses: boolean | undefined\n): PrerenderState {\n  return {\n    isDebugDynamicAccesses,\n    dynamicAccesses: [],\n  }\n}\n\n/**\n * This function communicates that the current scope should be treated as dynamic.\n *\n * In most cases this function is a no-op but if called during\n * a PPR prerender it will postpone the current sub-tree.\n */\nexport function markCurrentScopeAsDynamic(\n  store: StaticGenerationStore,\n  expression: string\n): void {\n  // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n  // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n  // forbidden inside a cache scope.\n  if (store.isUnstableCacheCallback) return\n\n  // If we're forcing dynamic rendering or we're forcing static rendering, we\n  // don't need to do anything here because the entire page is already dynamic\n  // or it's static and it should not throw or postpone here.\n  if (store.forceDynamic || store.forceStatic) return\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  if (\n    // We are in a prerender (PPR enabled, during build)\n    store.prerenderState\n  ) {\n    // We track that we had a dynamic scope that postponed.\n    // This will be used by the renderer to decide whether\n    // the prerender requires a resume\n    postponeWithTracking(store.prerenderState, expression, store.route)\n  }\n\n  store.revalidate = 0\n\n  if (store.isStaticGeneration) {\n    // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n    const err = new DynamicServerError(\n      `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n    )\n    store.dynamicUsageDescription = expression\n    store.dynamicUsageStack = err.stack\n\n    throw err\n  }\n}\n\n/**\n * This function communicates that some dynamic data was read. This typically would refer to accessing\n * a Request specific data store such as cookies or headers. This function is not how end-users will\n * describe reading from dynamic data sources which are valid to cache and up to the author to make\n * a determination of when to do so.\n *\n * If we are inside a cache scope we error\n * Also during a PPR Prerender we postpone\n */\nexport function trackDynamicDataAccessed(\n  store: StaticGenerationStore,\n  expression: string\n): void {\n  if (store.isUnstableCacheCallback) {\n    throw new Error(\n      `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`\n    )\n  } else if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  } else if (\n    // We are in a prerender (PPR enabled, during build)\n    store.prerenderState\n  ) {\n    // We track that we had a dynamic scope that postponed.\n    // This will be used by the renderer to decide whether\n    // the prerender requires a resume\n    postponeWithTracking(store.prerenderState, expression, store.route)\n  } else {\n    store.revalidate = 0\n\n    if (store.isStaticGeneration) {\n      // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    }\n  }\n}\n\n/**\n * This component will call `React.postpone` that throws the postponed error.\n */\ntype PostponeProps = {\n  reason: string\n  prerenderState: PrerenderState\n  route: string\n}\nexport function Postpone({\n  reason,\n  prerenderState,\n  route,\n}: PostponeProps): never {\n  postponeWithTracking(prerenderState, reason, route)\n}\n\nfunction postponeWithTracking(\n  prerenderState: PrerenderState,\n  expression: string,\n  route: string\n): never {\n  assertPostpone()\n  const reason =\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n\n  prerenderState.dynamicAccesses.push({\n    // When we aren't debugging, we don't need to create another error for the\n    // stack trace.\n    stack: prerenderState.isDebugDynamicAccesses\n      ? new Error().stack\n      : undefined,\n    expression,\n  })\n\n  React.unstable_postpone(reason)\n}\n\nexport function usedDynamicAPIs(prerenderState: PrerenderState): boolean {\n  return prerenderState.dynamicAccesses.length > 0\n}\n\nexport function formatDynamicAPIAccesses(\n  prerenderState: PrerenderState\n): string[] {\n  return prerenderState.dynamicAccesses\n    .filter(\n      (access): access is Required<DynamicAccess> =>\n        typeof access.stack === 'string' && access.stack.length > 0\n    )\n    .map(({ expression, stack }) => {\n      stack = stack\n        .split('\\n')\n        // Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4)\n        .filter((line) => {\n          // Exclude Next.js internals from the stack trace.\n          if (line.includes('node_modules/next/')) {\n            return false\n          }\n\n          // Exclude anonymous functions from the stack trace.\n          if (line.includes(' (<anonymous>)')) {\n            return false\n          }\n\n          // Exclude Node.js internals from the stack trace.\n          if (line.includes(' (node:')) {\n            return false\n          }\n\n          return true\n        })\n        .join('\\n')\n      return `Dynamic API Usage Debug - ${expression}:\\n${stack}`\n    })\n}\n\nfunction assertPostpone() {\n  if (!hasPostpone) {\n    throw new Error(\n      `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`\n    )\n  }\n}\n\n/**\n * This is a bit of a hack to allow us to abort a render using a Postpone instance instead of an Error which changes React's\n * abort semantics slightly.\n */\nexport function createPostponedAbortSignal(reason: string): AbortSignal {\n  assertPostpone()\n  const controller = new AbortController()\n  // We get our hands on a postpone instance by calling postpone and catching the throw\n  try {\n    React.unstable_postpone(reason)\n  } catch (x: unknown) {\n    controller.abort(x)\n  }\n  return controller.signal\n}\n"],"names":["Postpone","createPostponedAbortSignal","createPrerenderState","formatDynamicAPIAccesses","markCurrentScopeAsDynamic","trackDynamicDataAccessed","usedDynamicAPIs","hasPostpone","React","unstable_postpone","isDebugDynamicAccesses","dynamicAccesses","store","expression","isUnstableCacheCallback","forceDynamic","forceStatic","dynamicShouldError","StaticGenBailoutError","route","prerenderState","postponeWithTracking","revalidate","isStaticGeneration","err","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","Error","reason","assertPostpone","push","undefined","length","filter","access","map","split","slice","line","includes","join","controller","AbortController","x","abort","signal"],"mappings":"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"}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/server/web/spec-extension/adapters/reflect.ts"],"sourcesContent":["export class ReflectAdapter {\n  static get<T extends object>(\n    target: T,\n    prop: string | symbol,\n    receiver: unknown\n  ): any {\n    const value = Reflect.get(target, prop, receiver)\n    if (typeof value === 'function') {\n      return value.bind(target)\n    }\n\n    return value\n  }\n\n  static set<T extends object>(\n    target: T,\n    prop: string | symbol,\n    value: any,\n    receiver: any\n  ): boolean {\n    return Reflect.set(target, prop, value, receiver)\n  }\n\n  static has<T extends object>(target: T, prop: string | symbol): boolean {\n    return Reflect.has(target, prop)\n  }\n\n  static deleteProperty<T extends object>(\n    target: T,\n    prop: string | symbol\n  ): boolean {\n    return Reflect.deleteProperty(target, prop)\n  }\n}\n"],"names":["ReflectAdapter","get","target","prop","receiver","value","Reflect","bind","set","has","deleteProperty"],"mappings":";;;;+BAAaA,kBAAAA;;;eAAAA;;;AAAN,MAAMA;IACX,OAAOC,IACLC,MAAS,EACTC,IAAqB,EACrBC,QAAiB,EACZ;QACL,MAAMC,QAAQC,QAAQL,GAAG,CAACC,QAAQC,MAAMC;QACxC,IAAI,OAAOC,UAAU,YAAY;YAC/B,OAAOA,MAAME,IAAI,CAACL;QACpB;QAEA,OAAOG;IACT;IAEA,OAAOG,IACLN,MAAS,EACTC,IAAqB,EACrBE,KAAU,EACVD,QAAa,EACJ;QACT,OAAOE,QAAQE,GAAG,CAACN,QAAQC,MAAME,OAAOD;IAC1C;IAEA,OAAOK,IAAsBP,MAAS,EAAEC,IAAqB,EAAW;QACtE,OAAOG,QAAQG,GAAG,CAACP,QAAQC;IAC7B;IAEA,OAAOO,eACLR,MAAS,EACTC,IAAqB,EACZ;QACT,OAAOG,QAAQI,cAAc,CAACR,QAAQC;IACxC;AACF"}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 778, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/client/components/search-params.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\n\nimport { staticGenerationAsyncStorage } from './static-generation-async-storage.external'\nimport { trackDynamicDataAccessed } from '../../server/app-render/dynamic-rendering'\nimport { ReflectAdapter } from '../../server/web/spec-extension/adapters/reflect'\n\n/**\n * Takes a ParsedUrlQuery object and either returns it unmodified or returns an empty object\n *\n * Even though we do not track read access on the returned searchParams we need to\n * return an empty object if we are doing a 'force-static' render. This is to ensure\n * we don't encode the searchParams into the flight data.\n */\nexport function createUntrackedSearchParams(\n  searchParams: ParsedUrlQuery\n): ParsedUrlQuery {\n  const store = staticGenerationAsyncStorage.getStore()\n  if (store && store.forceStatic) {\n    return {}\n  } else {\n    return searchParams\n  }\n}\n\n/**\n * Takes a ParsedUrlQuery object and returns a Proxy that tracks read access to the object\n *\n * If running in the browser will always return the provided searchParams object.\n * When running during SSR will return empty during a 'force-static' render and\n * otherwise it returns a searchParams object which tracks reads to trigger dynamic rendering\n * behavior if appropriate\n */\nexport function createDynamicallyTrackedSearchParams(\n  searchParams: ParsedUrlQuery\n): ParsedUrlQuery {\n  const store = staticGenerationAsyncStorage.getStore()\n  if (!store) {\n    // we assume we are in a route handler or page render. just return the searchParams\n    return searchParams\n  } else if (store.forceStatic) {\n    // If we forced static we omit searchParams entirely. This is true both during SSR\n    // and browser render because we need there to be parity between these environments\n    return {}\n  } else {\n    // We need to track dynamic access with a Proxy. If `dynamic = \"error\"`, we use this information\n    // to fail the build. This also signals to the patched fetch that it's inside\n    // of a dynamic render and should bail from data cache. We implement get, has, and ownKeys because\n    // these can all be used to exfiltrate information about searchParams.\n\n    const trackedSearchParams: ParsedUrlQuery = store.isStaticGeneration\n      ? {}\n      : searchParams\n\n    return new Proxy(trackedSearchParams, {\n      get(target, prop, receiver) {\n        if (typeof prop === 'string') {\n          trackDynamicDataAccessed(store, `searchParams.${prop}`)\n        }\n        return ReflectAdapter.get(target, prop, receiver)\n      },\n      has(target, prop) {\n        if (typeof prop === 'string') {\n          trackDynamicDataAccessed(store, `searchParams.${prop}`)\n        }\n        return Reflect.has(target, prop)\n      },\n      ownKeys(target) {\n        trackDynamicDataAccessed(store, 'searchParams')\n        return Reflect.ownKeys(target)\n      },\n    })\n  }\n}\n"],"names":["createDynamicallyTrackedSearchParams","createUntrackedSearchParams","searchParams","store","staticGenerationAsyncStorage","getStore","forceStatic","trackedSearchParams","isStaticGeneration","Proxy","get","target","prop","receiver","trackDynamicDataAccessed","ReflectAdapter","has","Reflect","ownKeys"],"mappings":";;;;;;;;;;;;;;;IAgCgBA,sCAAoC;eAApCA;;IAnBAC,6BAA2B;eAA3BA;;;;;;AAAT,SAASA,4BACdC,YAA4B;IAE5B,MAAMC,QAAQC,sCAAAA,4BAA4B,CAACC,QAAQ;IACnD,IAAIF,SAASA,MAAMG,WAAW,EAAE;QAC9B,OAAO,CAAC;IACV,OAAO;QACL,OAAOJ;IACT;AACF;AAUO,SAASF,qCACdE,YAA4B;IAE5B,MAAMC,QAAQC,sCAAAA,4BAA4B,CAACC,QAAQ;IACnD,IAAI,CAACF,OAAO;QACV,mFAAmF;QACnF,OAAOD;IACT,OAAO,IAAIC,MAAMG,WAAW,EAAE;QAC5B,kFAAkF;QAClF,mFAAmF;QACnF,OAAO,CAAC;IACV,OAAO;QACL,gGAAgG;QAChG,6EAA6E;QAC7E,kGAAkG;QAClG,sEAAsE;QAEtE,MAAMC,sBAAsCJ,MAAMK,kBAAkB,GAChE,CAAC,IACDN;QAEJ,OAAO,IAAIO,MAAMF,qBAAqB;YACpCG,KAAIC,MAAM,EAAEC,IAAI,EAAEC,QAAQ;gBACxB,IAAI,OAAOD,SAAS,UAAU;oBAC5BE,CAAAA,GAAAA,kBAAAA,wBAAwB,EAACX,OAAO,kBAAgBS;gBAClD;gBACA,OAAOG,SAAAA,cAAc,CAACL,GAAG,CAACC,QAAQC,MAAMC;YAC1C;YACAG,KAAIL,MAAM,EAAEC,IAAI;gBACd,IAAI,OAAOA,SAAS,UAAU;oBAC5BE,CAAAA,GAAAA,kBAAAA,wBAAwB,EAACX,OAAO,kBAAgBS;gBAClD;gBACA,OAAOK,QAAQD,GAAG,CAACL,QAAQC;YAC7B;YACAM,SAAQP,MAAM;gBACZG,CAAAA,GAAAA,kBAAAA,wBAAwB,EAACX,OAAO;gBAChC,OAAOc,QAAQC,OAAO,CAACP;YACzB;QACF;IACF;AACF"}},
    {"offset": {"line": 853, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 857, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/client/components/client-page.tsx"],"sourcesContent":["'use client'\nimport { createDynamicallyTrackedSearchParams } from './search-params'\n\nexport function ClientPageRoot({\n  Component,\n  props,\n}: {\n  Component: React.ComponentType<any>\n  props: { [props: string]: any }\n}) {\n  // We expect to be passed searchParams but even if we aren't we can construct one from\n  // an empty object. We only do this if we are in a static generation as a performance\n  // optimization. Ideally we'd unconditionally construct the tracked params but since\n  // this creates a proxy which is slow and this would happen even for client navigations\n  // that are done entirely dynamically and we know there the dynamic tracking is a noop\n  // in this dynamic case we can safely elide it.\n  props.searchParams = createDynamicallyTrackedSearchParams(\n    props.searchParams || {}\n  )\n  return <Component {...props} />\n}\n"],"names":["props","createDynamicallyTrackedSearchParams","Component"],"mappings":"AAAA;;;;;;;;;;;;AAGO,MAAA;SAAwB,eAE7BA,KAID;IACC,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,GAAA;IACA,sFAAqF;IACrF,qFAAoF;IACpF,oFAAA;IACA,uFAAsF;IACtF,sFAA+C;IAC/CA,+CAAqBC;IAGrB,MAAA,YAAA,GAAO,CAAA,GAAA,cAAA,oCAACC,EAAAA,MAAAA,YAAAA,IAAAA,CAAAA;WAAcF,WAAK,GAAA,CAAA,GAAA,YAAA,GAAA,EAAA,WAAA;;IAC7B"}},
    {"offset": {"line": 890, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}